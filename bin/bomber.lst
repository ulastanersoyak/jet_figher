------- FILE src/bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE test/macros/macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"test/macros/macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE src/bomber.asm
------- FILE test/macros/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"test/macros/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE src/bomber.asm
      4 U009b ????				      seg.u	var
      5 U0080					      org	$80
      6 U0080							;6502 processor documentation -> http://www.6502.org/tutorials/6502opcodes.html
      7 U0080		       00	   mx	      byte.b		;missile x pos
      8 U0081		       00	   my	      byte.b		;missile y pos
      9 U0082		       00	   p0x	      byte.b		;player0 x pos
     10 U0083		       00	   p0y	      byte.b		;player0 y pos
     11 U0084		       00 00	   p0s	      word.w		;player0 sprite ptr
     12 U0086		       00 00	   p0c	      word.w		;player0 colour ptr
     13 U0088		       00	   p0ao       byte.b		;p0 animation offset
     14 U0088		       00 09	   p0h	      =	9	;player 0 height = current location -location of p0spr
     15 U0089		       00	   p1x	      byte.b		;player1 x pos
     16 U008a		       00	   p1y	      byte.b		;player1 y pos
     17 U008b		       00 00	   p1s	      word.w		;player1 sprite ptr
     18 U008d		       00 00	   p1c	      word.w		;player1 colour ptr
     19 U008d		       00 09	   p1h	      =	9
     20 U008f		       00	   rng	      byte.b		;generate psedo random numbers for p1y
     21 U0090		       00	   score      byte.b		;2-digit score stored as BCD
     22 U0091		       00	   highest    byte.b		;2-digit timer stored as BCD
     23 U0092		       00	   temp       byte.b		;auxiliary variable to store temp values
     24 U0093		       00 00	   oneoffset  word.w		;lookup table offset for the score ones digit
     25 U0095		       00 00	   tenoffset  word.w
     26 U0097		       00	   scrsp      byte.b		;store the sprite bit pattern for the score
     27 U0098		       00	   hsp	      byte.b		;highest sprite
     28 U0098		       00 05	   dgh	      =	5	;digit height
     29 U0099		       00	   tclr       byte.b		;terrain colour
     30 U009a		       00	   rclr       byte.b		;river colour
     31  10000 ????				       seg	code
     32  f000					      org	$F000
     33  f000				   res			;reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     35  f00b		       a9 0a		      lda	#10
     36  f00d		       85 83		      sta	p0y	;p0y=10
     37  f00f		       a9 44		      lda	#68
     38  f011		       85 82		      sta	p0x	;p0x=68
     39  f013		       a9 53		      lda	#83
     40  f015		       85 8a		      sta	p1y
     41  f017		       a9 36		      lda	#54
     42  f019		       85 89		      sta	p1x
     43  f01b		       a9 d4		      lda	#%11010100
     44  f01d		       85 8f		      sta	rng
     45  f01f		       a9 00		      lda	#0
     46  f021		       85 90		      sta	score	;score=0
     47  f023		       85 91		      sta	highest	;timer=0
     48  f023					      mac	drm
     49  f023					      lda	#%00000000
     50  f023					      cpx	my	;compare scanline with missile y pos
     51  f023					      bne	.skmd
     52  f023					      lda	#%00000010	;second bit enables m0 display
     53  f023					      inc	my
     54  f023				   .skmd		;skip missile draw
     55  f023					      sta	ENAM0	;store value on TIA missile register
     56  f023
     57  f023					      endm		;missile drawing m_acro
     58  f025							;p0
     59  f025		       a9 f9		      lda	#<p0_spr	;set lookup table for p0 sprite
     60  f027		       85 84		      sta	p0s
     61  f029		       a9 f2		      lda	#>p0_spr
     62  f02b		       85 85		      sta	p0s+1
     63  f02d		       a9 14		      lda	#<p0_clr	;set lookup table for p0 colour
     64  f02f		       85 86		      sta	p0c
     65  f031		       a9 f3		      lda	#>p0_clr
     66  f033		       85 87		      sta	p0c+1
     67  f035							;p1
     68  f035		       a9 0b		      lda	#<p1_spr	;set lookup table for p0 sprite
     69  f037		       85 8b		      sta	p1s
     70  f039		       a9 f3		      lda	#>p1_spr
     71  f03b		       85 8c		      sta	p1s+1
     72  f03d		       a9 26		      lda	#<p1_clr	;set lookup table for p0 colour
     73  f03f		       85 8d		      sta	p1c
     74  f041		       a9 f3		      lda	#>p1_clr
     75  f043		       85 8e		      sta	p1c+1
     76  f045				   dk			;draw kernel
     77  f045		       a9 02		      lda	#2
     78  f047		       85 00		      sta	VSYNC
     79  f049		       85 01		      sta	VBLANK
     80  f04b					      repeat	3
     81  f04b		       85 02		      sta	WSYNC	;start a new frame by renderin 3 vsync scanline
     80  f04b					      repend
     81  f04d		       85 02		      sta	WSYNC	;start a new frame by renderin 3 vsync scanline
     80  f04d					      repend
     81  f04f		       85 02		      sta	WSYNC	;start a new frame by renderin 3 vsync scanline
     82  f051					      repend
     83  f051		       a9 00		      lda	#0
     84  f053		       85 00		      sta	VSYNC
     85  f055					      repeat	33
     86  f055		       85 02		      sta	WSYNC
     85  f055					      repend
     86  f057		       85 02		      sta	WSYNC
     85  f057					      repend
     86  f059		       85 02		      sta	WSYNC
     85  f059					      repend
     86  f05b		       85 02		      sta	WSYNC
     85  f05b					      repend
     86  f05d		       85 02		      sta	WSYNC
     85  f05d					      repend
     86  f05f		       85 02		      sta	WSYNC
     85  f05f					      repend
     86  f061		       85 02		      sta	WSYNC
     85  f061					      repend
     86  f063		       85 02		      sta	WSYNC
     85  f063					      repend
     86  f065		       85 02		      sta	WSYNC
     85  f065					      repend
     86  f067		       85 02		      sta	WSYNC
     85  f067					      repend
     86  f069		       85 02		      sta	WSYNC
     85  f069					      repend
     86  f06b		       85 02		      sta	WSYNC
     85  f06b					      repend
     86  f06d		       85 02		      sta	WSYNC
     85  f06d					      repend
     86  f06f		       85 02		      sta	WSYNC
     85  f06f					      repend
     86  f071		       85 02		      sta	WSYNC
     85  f071					      repend
     86  f073		       85 02		      sta	WSYNC
     85  f073					      repend
     86  f075		       85 02		      sta	WSYNC
     85  f075					      repend
     86  f077		       85 02		      sta	WSYNC
     85  f077					      repend
     86  f079		       85 02		      sta	WSYNC
     85  f079					      repend
     86  f07b		       85 02		      sta	WSYNC
     85  f07b					      repend
     86  f07d		       85 02		      sta	WSYNC
     85  f07d					      repend
     86  f07f		       85 02		      sta	WSYNC
     85  f07f					      repend
     86  f081		       85 02		      sta	WSYNC
     85  f081					      repend
     86  f083		       85 02		      sta	WSYNC
     85  f083					      repend
     86  f085		       85 02		      sta	WSYNC
     85  f085					      repend
     86  f087		       85 02		      sta	WSYNC
     85  f087					      repend
     86  f089		       85 02		      sta	WSYNC
     85  f089					      repend
     86  f08b		       85 02		      sta	WSYNC
     85  f08b					      repend
     86  f08d		       85 02		      sta	WSYNC
     85  f08d					      repend
     86  f08f		       85 02		      sta	WSYNC
     85  f08f					      repend
     86  f091		       85 02		      sta	WSYNC
     85  f091					      repend
     86  f093		       85 02		      sta	WSYNC
     85  f093					      repend
     86  f095		       85 02		      sta	WSYNC
     87  f097					      repend
     88  f097		       a5 82		      lda	p0x
     89  f099		       a0 00		      ldy	#0
     90  f09b		       20 4b f2 	      jsr	setx	;set player0 horizontal position
     91  f09e		       a5 89		      lda	p1x
     92  f0a0		       a0 01		      ldy	#1
     93  f0a2		       20 4b f2 	      jsr	setx	;set player1 horizontal position
     94  f0a5		       a5 80		      lda	mx	;missle x pos
     95  f0a7		       a0 02		      ldy	#2
     96  f0a9		       20 4b f2 	      jsr	setx
     97  f0ac		       20 88 f2 	      jsr	calcdigoff	; calculate scoreboard digits lookup table offset
     98  f0af		       85 02		      sta	WSYNC
     99  f0b1		       85 2a		      sta	HMOVE	;apply horizontal movements set by subroutine
    100  f0b3		       a9 00		      lda	#0
    101  f0b5		       85 01		      sta	VBLANK
    102  f0b7							;scoreboard setup
    103  f0b7							;clear TIA register before each frame
    104  f0b7		       a9 00		      lda	#0
    105  f0b9		       85 0d		      sta	PF0
    106  f0bb		       85 0e		      sta	PF1
    107  f0bd		       85 0f		      sta	PF2
    108  f0bf		       85 1b		      sta	GRP0
    109  f0c1		       85 1c		      sta	GRP1
    110  f0c3		       85 0a		      sta	CTRLPF
    111  f0c5		       85 09		      sta	COLUBK
    112  f0c7		       a9 1e		      lda	#$1E
    113  f0c9		       85 08		      sta	COLUPF
    114  f0cb		       a2 05		      ldx	#dgh	;start X counter with 5 (height of digits)
    115  f0cd				   scrdgtl		;scire digit loop
    116  f0cd		       a4 95		      ldy	tenoffset	;get the tens digit offset for the score
    117  f0cf		       b9 a9 f2 	      lda	digit,Y	;load the bit pattern from lookup table
    118  f0d2		       29 f0		      and	#$F0	;mask/remove the graphics for the ones digit
    119  f0d4		       85 97		      sta	scrsp	;save the score tens digit pattern in a variable
    120  f0d6		       a4 93		      ldy	oneoffset	;get the ones digit offset for the score
    121  f0d8		       b9 a9 f2 	      lda	digit,Y	;load the digit bit pattern from lookup table
    122  f0db		       29 0f		      and	#$0F	;mask/remove the graphics for the tens digit
    123  f0dd		       05 97		      ora	scrsp	;merge it with the saved tens digit sprite
    124  f0df		       85 97		      sta	scrsp	;and save it
    125  f0e1		       85 02		      sta	WSYNC	;wait for the end of scanline
    126  f0e3		       85 0e		      sta	PF1	;update the playfield to display the score sprite
    127  f0e5		       a4 96		      ldy	tenoffset+1	;get the left digit offset for the highest
    128  f0e7		       b9 a9 f2 	      lda	digit,Y	;load the digit pattern from lookup table
    129  f0ea		       29 f0		      and	#$F0	;mask/remove the graphics for the ones digit
    130  f0ec		       85 98		      sta	hsp	;save the highest tens digit pattern in a variable
    131  f0ee		       a4 94		      ldy	oneoffset+1	;get the ones digit offset for the highest
    132  f0f0		       b9 a9 f2 	      lda	digit,Y	;load digit pattern from the lookup table
    133  f0f3		       29 0f		      and	#$0F	;mask/remove the graphics for the tens digit
    134  f0f5		       05 98		      ora	hsp	;merge with the saved tens digit graphics
    135  f0f7		       85 98		      sta	hsp	;and save it
    136  f0f9		       20 a8 f2 	      jsr	slp12	;wastes some cycles
    137  f0fc		       85 0e		      sta	PF1	;update the playfield for highest display
    138  f0fe		       a4 97		      ldy	scrsp	;preload for the next scanline
    139  f100		       85 02		      sta	WSYNC	;wait for next scanline
    140  f102		       84 0e		      sty	PF1	;update playfield for the score display
    141  f104		       e6 95		      inc	tenoffset
    142  f106		       e6 96		      inc	tenoffset+1
    143  f108		       e6 93		      inc	oneoffset
    144  f10a		       e6 94		      inc	oneoffset+1	;increment all digits for the next line of data
    145  f10c		       20 a8 f2 	      jsr	slp12	;waste some cycles
    146  f10f		       ca		      dex		;X--
    147  f110		       85 0e		      sta	PF1	;update the playfield for the highest display
    148  f112		       d0 b9		      bne	scrdgtl	;if dex != 0, then branch to ScoreDigitLoop
    149  f114		       85 02		      sta	WSYNC
    150  f116		       a9 00		      lda	#0
    151  f118		       85 0d		      sta	PF0
    152  f11a		       85 0e		      sta	PF1
    153  f11c		       85 0f		      sta	PF2
    154  f11e					      repeat	3
    155  f11e		       85 02		      sta	WSYNC
    154  f11e					      repend
    155  f120		       85 02		      sta	WSYNC
    154  f120					      repend
    155  f122		       85 02		      sta	WSYNC
    156  f124					      repend
    157  f124				   vl			;visible lines
    158  f124							;colour palette -> https://en.wikipedia.org/wiki/List_of_video_game_console_palettes
    159  f124		       a5 99		      lda	tclr
    160  f126		       85 08		      sta	COLUPF	; set the terrain background color
    161  f128		       a5 9a		      lda	rclr
    162  f12a		       85 09		      sta	COLUBK
    163  f12c		       a9 01		      lda	#%00000001	;enable reflection of playfield
    164  f12e		       85 0a		      sta	CTRLPF	;control playfield register (left most bit decides on reflection or repetition)
    165  f130		       a9 f0		      lda	#$F0
    166  f132		       85 0d		      sta	PF0
    167  f134		       a9 fc		      lda	#$FC
    168  f136		       85 0e		      sta	PF1
    169  f138		       a9 00		      lda	#0
    170  f13a		       85 0f		      sta	PF2
    171  f13c		       a2 54		      ldx	#84	;half of visible lines because of 2-line kernel usag
    172  f13e				   .vll 		;visible line loop
      0  f13e					      DRM		;draw missile macro
      1  f13e		       a9 00		      lda	#%00000000
      2  f140		       e4 81		      cpx	my
      3  f142		       d0 04		      bne	.skmd
      4  f144		       a9 02		      lda	#%00000010
      5  f146		       e6 81		      inc	my
      6  f148				   .skmd
      7  f148		       85 1d		      sta	ENAM0
      8  f14a
    174  f14a				   .check_p0		;check if p0 is ready to render
    175  f14a		       8a		      txa		;transfer x to a register
    176  f14b		       38		      sec		;set the carry flag for subtraction
    177  f14c		       e5 83		      sbc	p0y	;subtract p0 y from current line
    178  f14e		       c5 09		      cmp	p0h	;check if sprite is in render position
    179  f150		       90 02		      bcc	.dp0	;if rs < p0h, draw p0
    180  f152		       a9 00		      lda	#0	;else set a register to 0 in order to prepare for next iter
    181  f154				   .dp0 		;draw player0 sprite
    182  f154		       18		      clc		;clear carry flag before addition
    183  f155		       65 88		      adc	p0ao
    184  f157		       a8		      tay		;transfer a to y
    185  f158		       b1 84		      lda	(p0s),Y
    186  f15a		       85 02		      sta	WSYNC
    187  f15c		       85 1b		      sta	GRP0
    188  f15e		       b1 86		      lda	(p0c),Y
    189  f160		       85 06		      sta	COLUP0
    190  f162				   .check_p1		;check if p1 is ready to render
    191  f162		       8a		      txa		;transfer x to a register
    192  f163		       38		      sec		;set the carry flag for subtraction
    193  f164		       e5 8a		      sbc	p1y	;subtract p0 y from current line
    194  f166		       c5 09		      cmp	p1h	;check if sprite is in render position
    195  f168		       90 02		      bcc	.dp1	;if rs < p0h, draw p0
    196  f16a		       a9 00		      lda	#0	;else set a register to 0 in order to prepare for next iter
    197  f16c				   .dp1 		;draw player1 sprite
    198  f16c		       a8		      tay		;transfer a to y
    199  f16d		       a9 05		      lda	#%00000101
    200  f16f		       85 05		      sta	NUSIZ1
    201  f171		       b1 8b		      lda	(p1s),Y
    202  f173		       85 02		      sta	WSYNC
    203  f175		       85 1c		      sta	GRP1
    204  f177		       b1 8d		      lda	(p1c),Y
    205  f179		       85 07		      sta	COLUP1
    206  f17b		       ca		      dex
    207  f17c		       d0 c0		      bne	.vll
    208  f17e		       a9 00		      lda	#0
    209  f180		       85 88		      sta	p0ao
    210  f182							;overcan
    211  f182		       a9 02		      lda	#2
    212  f184		       85 01		      sta	VBLANK
    213  f186		       a2 1e		      ldx	#30	;30 ovescan scanlines
    214  f188				   ovs
    215  f188		       85 02		      sta	WSYNC
    216  f18a		       ca		      dex		;x--
    217  f18b		       d0 fb		      bne	ovs	;jump to ovs if x!=0
    218  f18d		       a9 00		      lda	#0
    219  f18f		       85 01		      sta	VBLANK	;disable blank scanlines
    220  f191							;process input for p0 (up-down-left-right)
    221  f191				   p0up 		;check if p0 is pressed up arrow
    222  f191		       a9 10		      lda	#%00010000	;p0 up
    223  f193		       2c 80 02 	      bit	SWCHA
    224  f196		       d0 0c		      bne	p0dw
    225  f198		       a5 83		      lda	p0y
    226  f19a		       c9 46		      cmp	#70
    227  f19c		       10 06		      bpl	p0dw
    228  f19e		       e6 83		      inc	p0y	;p0 y pos++
    229  f1a0		       a9 00		      lda	#0
    230  f1a2		       85 88		      sta	p0ao
    231  f1a4				   p0dw 		;p0 down
    232  f1a4		       a9 20		      lda	#%00100000
    233  f1a6		       2c 80 02 	      bit	SWCHA
    234  f1a9		       d0 0c		      bne	p0le
    235  f1ab		       a5 83		      lda	p0y
    236  f1ad		       c9 05		      cmp	#5
    237  f1af		       30 06		      bmi	p0le
    238  f1b1		       c6 83		      dec	p0y	;p0 y pos--
    239  f1b3		       a9 00		      lda	#0
    240  f1b5		       85 88		      sta	p0ao
    241  f1b7				   p0le 		;p0 left
    242  f1b7		       a9 40		      lda	#%01000000
    243  f1b9		       2c 80 02 	      bit	SWCHA
    244  f1bc		       d0 0c		      bne	p0ri
    245  f1be		       a5 82		      lda	p0x
    246  f1c0		       c9 20		      cmp	#32
    247  f1c2		       30 06		      bmi	p0ri
    248  f1c4		       c6 82		      dec	p0x	;p0 x pos--
    249  f1c6		       a9 09		      lda	#9
    250  f1c8		       85 88		      sta	p0ao
    251  f1ca				   p0ri 		;p0 right
    252  f1ca		       a9 80		      lda	#%10000000
    253  f1cc		       2c 80 02 	      bit	SWCHA
    254  f1cf		       d0 0c		      bne	mish
    255  f1d1		       a5 82		      lda	p0x
    256  f1d3		       c9 66		      cmp	#102
    257  f1d5		       10 06		      bpl	mish
    258  f1d7		       e6 82		      inc	p0x	;p0 x pos++
    259  f1d9		       a9 09		      lda	#9
    260  f1db		       85 88		      sta	p0ao
    261  f1dd				   mish 		;missile shoot
    262  f1dd		       a9 80		      lda	#%10000000
    263  f1df		       24 0c		      bit	INPT4	;check button pressed
    264  f1e1		       d0 0e		      bne	df
    265  f1e3		       a5 82		      lda	p0x
    266  f1e5		       18		      clc
    267  f1e6		       69 05		      adc	#5
    268  f1e8		       85 80		      sta	mx	;store mxpos as p0xpos
    269  f1ea		       a5 83		      lda	p0y
    270  f1ec		       18		      clc
    271  f1ed		       69 04		      adc	#4
    272  f1ef		       85 81		      sta	my	;store mypos as p0ypos
    273  f1f1				   df			;if none action taken by p0
    274  f1f1				   up1pos		;update p1 y position
    275  f1f1		       a5 8a		      lda	p1y	;transfer p1 y pos to a register
    276  f1f3		       18		      clc		;clear carry register for comparison
    277  f1f4		       c9 00		      cmp	#0	;check if p1 reached to 0
    278  f1f6		       30 05		      bmi	.resp1pos	;reset p1 y position to top if it reached 0
    279  f1f8		       c6 8a		      dec	p1y	;else p1y--
    280  f1fa		       4c 03 f2 	      jmp	endpos	;jump over reset
    281  f1fd				   .resp1pos		;reset p1 position
    282  f1fd		       20 5f f2 	      jsr	GO
    283  f200		       20 6a f2 	      jsr	rngp1
    284  f203				   endpos
    285  f203				   .cp0p1		;p0 p1 collision chck
    286  f203		       a9 80		      lda	#%10000000	;CXPPMM bit 7 detects p0 and p1 collision
    287  f205		       24 07		      bit	CXPPMM	;check CXPPMM bit 7
    288  f207		       d0 06		      bne	.CP0P1	;jump if collided
    289  f209		       20 42 f2 	      jsr	strclr
    290  f20c		       4c 12 f2 	      jmp	.cm0p1
    291  f20f				   .CP0P1		;when p0 collides with p1
    292  f20f		       20 5f f2 	      jsr	GO	;game over
    293  f212				   .cm0p1		;missile 0 p1 collision check
    294  f212		       a9 80		      lda	#%10000000
    295  f214		       24 00		      bit	CXM0P	;m0 p1 collision check register
    296  f216		       d0 03		      bne	.CM0P1
    297  f218		       4c 3d f2 	      jmp	.endclch
    298  f21b				   .CM0P1		;when m0 collides with p1
    299  f21b		       f8		      sed		;decimal mode for incrementing the score
    300  f21c		       a5 90		      lda	score
    301  f21e		       18		      clc
    302  f21f		       69 01		      adc	#1
    303  f221		       85 90		      sta	score
    304  f223		       d8		      cld		;disable decimal mode
    305  f224		       a9 00		      lda	#0
    306  f226		       85 81		      sta	my	;make missile disappear after collision
    307  f228		       20 6a f2 	      jsr	rngp1
    308  f22b		       a6 91		      ldx	highest
    309  f22d		       e4 90		      cpx	score
    310  f22f		       90 03		      bcc	.sethigh
    311  f231		       4c 3d f2 	      jmp	.endclch
    312  f234
    313  f234				   .sethigh
    314  f234		       f8		      sed		;decimal mode for incrementing the score
    315  f235		       a5 91		      lda	highest
    316  f237		       18		      clc
    317  f238		       69 01		      adc	#1
    318  f23a		       85 91		      sta	highest
    319  f23c		       d8		      cld		;disable decimal mode
    320  f23d				   .endclch		;end collision check
    321  f23d		       85 2c		      sta	CXCLR	;clear collisions
    322  f23f		       4c 45 f0 	      jmp	dk
    323  f242				   strclr     subroutine		;set terrain river colour
    324  f242		       a9 c2		      lda	#$C2
    325  f244		       85 99		      sta	tclr	;set terrain color to green
    326  f246		       a9 84		      lda	#$84
    327  f248		       85 9a		      sta	rclr	;set river color to blue
    328  f24a		       60		      rts
    329  f24b				   setx       subroutine		;set object's x positon subroutine
    330  f24b		       85 02		      sta	WSYNC
    331  f24d		       38		      sec		;set carry flag
    332  f24e				   .div 		;division loop -since 6502 opcode doesnt include any division, division is achieved via series of subtractions
    333  f24e		       e9 0f		      sbc	#15	;subtraction takes 2 clock cycles and branching takes 3 clock cycle thus making a total of 5 clock cycle in each
    334  f250							;subtraction. each CPU clock cycle is equivelent of 3 TIA clock cycles so each division is 15 pixel. to determine
    335  f250							;p0_x location calculate rough position by dividing by 15 and use remainder to fine tune the exact position
    336  f250		       b0 fc		      bcs	.div	;jump to div if a<0
    337  f252		       49 07		      eor	#7	;exclusive or with %00000111 to fine tune the x position
    338  f254					      repeat	4	;HMP0 uses 4 bits %xxxx0000
    339  f254		       0a		      asl
    338  f254					      repend
    339  f255		       0a		      asl
    338  f255					      repend
    339  f256		       0a		      asl
    338  f256					      repend
    339  f257		       0a		      asl
    340  f258					      repend
    341  f258		       99 20 00 	      sta	HMP0,Y
    342  f25b		       99 10 00 	      sta	RESP0,Y
    343  f25e		       60		      rts
    344  f25f				   GO	      subroutine		;game over subroutine
    345  f25f		       a9 30		      lda	#$30
    346  f261		       85 99		      sta	tclr	;set terrain color to red
    347  f263		       85 9a		      sta	rclr	;set river color to red
    348  f265		       a9 00		      lda	#0
    349  f267		       85 90		      sta	score	;Score = 0
    350  f269		       60		      rts
    351  f26a				   rngp1      subroutine		;random number generator for p1 starting position
    352  f26a		       a5 8f		      lda	rng
    353  f26c		       0a		      asl
    354  f26d		       45 8f		      eor	rng
    355  f26f		       0a		      asl
    356  f270		       45 8f		      eor	rng
    357  f272		       0a		      asl
    358  f273		       0a		      asl
    359  f274		       45 8f		      eor	rng
    360  f276		       0a		      asl
    361  f277		       26 8f		      rol	rng	;performs a series of shifts and bit operations
    362  f279		       4a		      lsr
    363  f27a		       4a		      lsr		;divide the value by 4 with 2 right shifts
    364  f27b		       85 89		      sta	p1x	;save random number on player1 x position
    365  f27d		       a9 1e		      lda	#30
    366  f27f		       65 89		      adc	p1x	;30+p1x to compensate for left playfield
    367  f281		       85 89		      sta	p1x	;set new value to the p1x
    368  f283		       a9 60		      lda	#96
    369  f285		       85 8a		      sta	p1y	;set the y-position to the top of the screen
    370  f287		       60		      rts
    371  f288				   calcdigoff subroutine
    372  f288		       a2 01		      ldx	#1	;X register is the loop counter
    373  f28a				   prepscrl		;this will loop twice, first X=1, and then X=0
    374  f28a		       b5 90		      lda	score,X	;load A with highest (X=1) or Score (X=0)
    375  f28c		       29 0f		      and	#$0F	;remove the tens digit by masking 4 bits 00001111
    376  f28e		       85 92		      sta	temp	;save the value of A into Temp
    377  f290		       0a		      asl		;shift left (it is now N*2)
    378  f291		       0a		      asl		;shift left (it is now N*4)
    379  f292		       65 92		      adc	temp	;add the value saved in Temp (+N)
    380  f294		       95 93		      sta	oneoffset,X	;save A in OnesDigitOffset+1 or OnesDigitOffset
    381  f296		       b5 90		      lda	score,X	;load A with highest (X=1) or Score (X=0)
    382  f298		       29 f0		      and	#$F0	;remove the ones digit by masking 4 bits 11110000
    383  f29a		       4a		      lsr		;shift right (it is now N/2)
    384  f29b		       4a		      lsr		;shift right (it is now N/4)
    385  f29c		       85 92		      sta	temp	;save the value of A into Temp
    386  f29e		       4a		      lsr		;shift right (it is now N/8)
    387  f29f		       4a		      lsr		;shift right (it is now N/16)
    388  f2a0		       65 92		      adc	temp	;add the value saved in Temp (N/16+N/4)
    389  f2a2		       95 95		      sta	tenoffset,X	;store A in TensDigitOffset+1 or TensDigitOffset
    390  f2a4		       ca		      dex		;X--
    391  f2a5		       10 e3		      bpl	prepscrl	; while X >= 0, loop to pass a second time
    392  f2a7		       60		      rts
    393  f2a8				   slp12      subroutine
    394  f2a8		       60		      rts
    395  f2a9				   digit
    396  f2a9		       77		      .byte.b	%01110111	; ### ###
    397  f2aa		       55		      .byte.b	%01010101	; # # # #
    398  f2ab		       55		      .byte.b	%01010101	; # # # #
    399  f2ac		       55		      .byte.b	%01010101	; # # # #
    400  f2ad		       77		      .byte.b	%01110111	; ### ###
    401  f2ae		       11		      .byte.b	%00010001	;   #	 #
    402  f2af		       11		      .byte.b	%00010001	;   #	 #
    403  f2b0		       11		      .byte.b	%00010001	;   #	 #
    404  f2b1		       11		      .byte.b	%00010001	;   #	 #
    405  f2b2		       11		      .byte.b	%00010001	;   #	 #
    406  f2b3		       77		      .byte.b	%01110111	; ### ###
    407  f2b4		       11		      .byte.b	%00010001	;   #	 #
    408  f2b5		       77		      .byte.b	%01110111	; ### ###
    409  f2b6		       44		      .byte.b	%01000100	; #   #
    410  f2b7		       77		      .byte.b	%01110111	; ### ###
    411  f2b8		       77		      .byte.b	%01110111	; ### ###
    412  f2b9		       11		      .byte.b	%00010001	;   #	 #
    413  f2ba		       33		      .byte.b	%00110011	;  ##	##
    414  f2bb		       11		      .byte.b	%00010001	;   #	 #
    415  f2bc		       77		      .byte.b	%01110111	; ### ###
    416  f2bd		       55		      .byte.b	%01010101	; # # # #
    417  f2be		       55		      .byte.b	%01010101	; # # # #
    418  f2bf		       77		      .byte.b	%01110111	; ### ###
    419  f2c0		       11		      .byte.b	%00010001	;   #	 #
    420  f2c1		       11		      .byte.b	%00010001	;   #	 #
    421  f2c2		       77		      .byte.b	%01110111	; ### ###
    422  f2c3		       44		      .byte.b	%01000100	; #   #
    423  f2c4		       77		      .byte.b	%01110111	; ### ###
    424  f2c5		       11		      .byte.b	%00010001	;   #	 #
    425  f2c6		       77		      .byte.b	%01110111	; ### ###
    426  f2c7		       77		      .byte.b	%01110111	; ### ###
    427  f2c8		       44		      .byte.b	%01000100	; #   #
    428  f2c9		       77		      .byte.b	%01110111	; ### ###
    429  f2ca		       55		      .byte.b	%01010101	; # # # #
    430  f2cb		       77		      .byte.b	%01110111	; ### ###
    431  f2cc		       77		      .byte.b	%01110111	; ### ###
    432  f2cd		       11		      .byte.b	%00010001	;   #	 #
    433  f2ce		       11		      .byte.b	%00010001	;   #	 #
    434  f2cf		       11		      .byte.b	%00010001	;   #	 #
    435  f2d0		       11		      .byte.b	%00010001	;   #	 #
    436  f2d1		       77		      .byte.b	%01110111	; ### ###
    437  f2d2		       55		      .byte.b	%01010101	; # # # #
    438  f2d3		       77		      .byte.b	%01110111	; ### ###
    439  f2d4		       55		      .byte.b	%01010101	; # # # #
    440  f2d5		       77		      .byte.b	%01110111	; ### ###
    441  f2d6		       77		      .byte.b	%01110111	; ### ###
    442  f2d7		       55		      .byte.b	%01010101	; # # # #
    443  f2d8		       77		      .byte.b	%01110111	; ### ###
    444  f2d9		       11		      .byte.b	%00010001	;   #	 #
    445  f2da		       77		      .byte.b	%01110111	; ### ###
    446  f2db		       22		      .byte.b	%00100010	;  #	#
    447  f2dc		       55		      .byte.b	%01010101	; # # # #
    448  f2dd		       77		      .byte.b	%01110111	; ### ###
    449  f2de		       55		      .byte.b	%01010101	; # # # #
    450  f2df		       55		      .byte.b	%01010101	; # # # #
    451  f2e0		       77		      .byte.b	%01110111	; ### ###
    452  f2e1		       55		      .byte.b	%01010101	; # # # #
    453  f2e2		       66		      .byte.b	%01100110	; ##  ##
    454  f2e3		       55		      .byte.b	%01010101	; # # # #
    455  f2e4		       77		      .byte.b	%01110111	; ### ###
    456  f2e5		       77		      .byte.b	%01110111	; ### ###
    457  f2e6		       44		      .byte.b	%01000100	; #   #
    458  f2e7		       44		      .byte.b	%01000100	; #   #
    459  f2e8		       44		      .byte.b	%01000100	; #   #
    460  f2e9		       77		      .byte.b	%01110111	; ### ###
    461  f2ea		       66		      .byte.b	%01100110	; ##  ##
    462  f2eb		       55		      .byte.b	%01010101	; # # # #
    463  f2ec		       55		      .byte.b	%01010101	; # # # #
    464  f2ed		       55		      .byte.b	%01010101	; # # # #
    465  f2ee		       66		      .byte.b	%01100110	; ##  ##
    466  f2ef		       77		      .byte.b	%01110111	; ### ###
    467  f2f0		       44		      .byte.b	%01000100	; #   #
    468  f2f1		       77		      .byte.b	%01110111	; ### ###
    469  f2f2		       44		      .byte.b	%01000100	; #   #
    470  f2f3		       77		      .byte.b	%01110111	; ### ###
    471  f2f4		       77		      .byte.b	%01110111	; ### ###
    472  f2f5		       44		      .byte.b	%01000100	; #   #
    473  f2f6		       66		      .byte.b	%01100110	; ##  ##
    474  f2f7		       44		      .byte.b	%01000100	; #   #
    475  f2f8		       44		      .byte.b	%01000100	; #   #
    476  f2f9				   p0_spr		;p0 sprite
    477  f2f9		       00		      .byte.b	#%00000000	;
    478  f2fa		       14		      .byte.b	#%00010100	;   # #
    479  f2fb		       7f		      .byte.b	#%01111111	; #######
    480  f2fc		       3e		      .byte.b	#%00111110	;  #####
    481  f2fd		       1c		      .byte.b	#%00011100	;   ###
    482  f2fe		       1c		      .byte.b	#%00011100	;   ###
    483  f2ff		       08		      .byte.b	#%00001000	;    #
    484  f300		       08		      .byte.b	#%00001000	;    #
    485  f301		       08		      .byte.b	#%00001000	;    #
    486  f302				   p0_trn		;p0 turn sprite
    487  f302		       00		      .byte.b	#%00000000	;
    488  f303		       08		      .byte.b	#%00001000	;    #
    489  f304		       3e		      .byte.b	#%00111110	;  #####
    490  f305		       1c		      .byte.b	#%00011100	;   ###
    491  f306		       1c		      .byte.b	#%00011100	;   ###
    492  f307		       1c		      .byte.b	#%00011100	;   ###
    493  f308		       08		      .byte.b	#%00001000	;    #
    494  f309		       08		      .byte.b	#%00001000	;    #
    495  f30a		       08		      .byte.b	#%00001000	;    #
    496  f30b				   p1_spr		;p1 sprite
    497  f30b		       00		      .byte.b	#%00000000	;
    498  f30c		       08		      .byte.b	#%00001000	;    #
    499  f30d		       08		      .byte.b	#%00001000	;    #
    500  f30e		       2a		      .byte.b	#%00101010	;  # # #
    501  f30f		       3e		      .byte.b	#%00111110	;  #####
    502  f310		       7f		      .byte.b	#%01111111	; #######
    503  f311		       2a		      .byte.b	#%00101010	;  # # #
    504  f312		       08		      .byte.b	#%00001000	;    #
    505  f313		       1c		      .byte.b	#%00011100	;   ###
    506  f314				   p0_clr		;p0 colour
    507  f314		       00		      .byte.b	#$00
    508  f315		       fe		      .byte.b	#$FE
    509  f316		       0c		      .byte.b	#$0C
    510  f317		       0e		      .byte.b	#$0E
    511  f318		       0e		      .byte.b	#$0E
    512  f319		       04		      .byte.b	#$04
    513  f31a		       ba		      .byte.b	#$BA
    514  f31b		       0e		      .byte.b	#$0E
    515  f31c		       08		      .byte.b	#$08
    516  f31d				   p0_tclr		;p0 turn colour
    517  f31d		       00		      .byte.b	#$00
    518  f31e		       fe		      .byte.b	#$FE
    519  f31f		       0c		      .byte.b	#$0C
    520  f320		       0e		      .byte.b	#$0E
    521  f321		       0e		      .byte.b	#$0E
    522  f322		       04		      .byte.b	#$04
    523  f323		       0e		      .byte.b	#$0E
    524  f324		       0e		      .byte.b	#$0E
    525  f325		       08		      .byte.b	#$08
    526  f326				   p1_clr		;p1 colour
    527  f326		       00		      .byte.b	#$00
    528  f327		       32		      .byte.b	#$32
    529  f328		       32		      .byte.b	#$32
    530  f329		       0e		      .byte.b	#$0E
    531  f32a		       40		      .byte.b	#$40
    532  f32b		       40		      .byte.b	#$40
    533  f32c		       40		      .byte.b	#$40
    534  f32d		       40		      .byte.b	#$40
    535  f32e		       40		      .byte.b	#$40
    536  fffc					      org	$FFFC
    537  fffc		       00 f0		      .word.w	res
    538  fffe		       00 f0		      .word.w	res
