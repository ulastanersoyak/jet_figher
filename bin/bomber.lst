------- FILE src/bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE test/macros/macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"test/macros/macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE src/bomber.asm
------- FILE test/macros/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"test/macros/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE src/bomber.asm
      4 U0099 ????				      seg.u	var
      5 U0080					      org	$80
      6 U0080		       00	   p0x	      byte.b		;player0 x pos
      7 U0081		       00	   p0y	      byte.b		;player0 y pos
      8 U0082		       00 00	   p0s	      word.w		;player0 sprite ptr
      9 U0084		       00 00	   p0c	      word.w		;player0 colour ptr
     10 U0086		       00	   p0ao       byte.b		;p0 animation offset
     11 U0086		       00 09	   p0h	      =	9	;player 0 height = current location -location of p0spr
     12 U0087		       00	   p1x	      byte.b		;player1 x pos
     13 U0088		       00	   p1y	      byte.b		;player1 y pos
     14 U0089		       00 00	   p1s	      word.w		;player1 sprite ptr
     15 U008b		       00 00	   p1c	      word.w		;player1 colour ptr
     16 U008b		       00 09	   p1h	      =	9
     17 U008d		       00	   rng	      byte.b		;generate psedo random numbers for p1y
     18 U008e		       00	   score      byte.b		;2-digit score stored as BCD
     19 U008f		       00	   timer      byte.b		;2-digit timer stored as BCD
     20 U0090		       00	   temp       byte.b		;auxiliary variable to store temp values
     21 U0091		       00 00	   oneoffset  word.w		;lookup table offset for the score ones digit
     22 U0093		       00 00	   tenoffset  word.w
     23 U0095		       00	   scrsp      byte.b		;store the sprite bit pattern for the score
     24 U0096		       00	   tmrsp      byte.b		;timer sprite
     25 U0096		       00 05	   dgh	      =	5	;digit height
     26 U0097		       00	   tclr       byte.b		;terrain colour
     27 U0098		       00	   rclr       byte.b		;river colour
     28  10000 ????				       seg	code
     29  f000					      org	$F000
     30  f000				   res			;reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     32  f00b		       a9 0a		      lda	#10
     33  f00d		       85 81		      sta	p0y	;p0y=10
     34  f00f		       a9 44		      lda	#68
     35  f011		       85 80		      sta	p0x	;p0x=68
     36  f013		       a9 53		      lda	#83
     37  f015		       85 88		      sta	p1y
     38  f017		       a9 36		      lda	#54
     39  f019		       85 87		      sta	p1x
     40  f01b		       a9 d4		      lda	#%11010100
     41  f01d		       85 8d		      sta	rng
     42  f01f		       a9 00		      lda	#0
     43  f021		       85 8e		      sta	score	;score=0
     44  f023		       85 8f		      sta	timer	;timer=0
     45  f025							;p0
     46  f025		       a9 a8		      lda	#<p0_spr	;set lookup table for p0 sprite
     47  f027		       85 82		      sta	p0s
     48  f029		       a9 f2		      lda	#>p0_spr
     49  f02b		       85 83		      sta	p0s+1
     50  f02d		       a9 c3		      lda	#<p0_clr	;set lookup table for p0 colour
     51  f02f		       85 84		      sta	p0c
     52  f031		       a9 f2		      lda	#>p0_clr
     53  f033		       85 85		      sta	p0c+1
     54  f035							;p1
     55  f035		       a9 ba		      lda	#<p1_spr	;set lookup table for p0 sprite
     56  f037		       85 89		      sta	p1s
     57  f039		       a9 f2		      lda	#>p1_spr
     58  f03b		       85 8a		      sta	p1s+1
     59  f03d		       a9 d5		      lda	#<p1_clr	;set lookup table for p0 colour
     60  f03f		       85 8b		      sta	p1c
     61  f041		       a9 f2		      lda	#>p1_clr
     62  f043		       85 8c		      sta	p1c+1
     63  f045				   dk			;draw kernel
     64  f045		       a9 02		      lda	#2
     65  f047		       85 00		      sta	VSYNC
     66  f049		       85 01		      sta	VBLANK
     67  f04b					      repeat	3
     68  f04b		       85 02		      sta	WSYNC	;start a new frame by renderin 3 vsync scanline
     67  f04b					      repend
     68  f04d		       85 02		      sta	WSYNC	;start a new frame by renderin 3 vsync scanline
     67  f04d					      repend
     68  f04f		       85 02		      sta	WSYNC	;start a new frame by renderin 3 vsync scanline
     69  f051					      repend
     70  f051		       a9 00		      lda	#0
     71  f053		       85 00		      sta	VSYNC
     72  f055					      repeat	33
     73  f055		       85 02		      sta	WSYNC
     72  f055					      repend
     73  f057		       85 02		      sta	WSYNC
     72  f057					      repend
     73  f059		       85 02		      sta	WSYNC
     72  f059					      repend
     73  f05b		       85 02		      sta	WSYNC
     72  f05b					      repend
     73  f05d		       85 02		      sta	WSYNC
     72  f05d					      repend
     73  f05f		       85 02		      sta	WSYNC
     72  f05f					      repend
     73  f061		       85 02		      sta	WSYNC
     72  f061					      repend
     73  f063		       85 02		      sta	WSYNC
     72  f063					      repend
     73  f065		       85 02		      sta	WSYNC
     72  f065					      repend
     73  f067		       85 02		      sta	WSYNC
     72  f067					      repend
     73  f069		       85 02		      sta	WSYNC
     72  f069					      repend
     73  f06b		       85 02		      sta	WSYNC
     72  f06b					      repend
     73  f06d		       85 02		      sta	WSYNC
     72  f06d					      repend
     73  f06f		       85 02		      sta	WSYNC
     72  f06f					      repend
     73  f071		       85 02		      sta	WSYNC
     72  f071					      repend
     73  f073		       85 02		      sta	WSYNC
     72  f073					      repend
     73  f075		       85 02		      sta	WSYNC
     72  f075					      repend
     73  f077		       85 02		      sta	WSYNC
     72  f077					      repend
     73  f079		       85 02		      sta	WSYNC
     72  f079					      repend
     73  f07b		       85 02		      sta	WSYNC
     72  f07b					      repend
     73  f07d		       85 02		      sta	WSYNC
     72  f07d					      repend
     73  f07f		       85 02		      sta	WSYNC
     72  f07f					      repend
     73  f081		       85 02		      sta	WSYNC
     72  f081					      repend
     73  f083		       85 02		      sta	WSYNC
     72  f083					      repend
     73  f085		       85 02		      sta	WSYNC
     72  f085					      repend
     73  f087		       85 02		      sta	WSYNC
     72  f087					      repend
     73  f089		       85 02		      sta	WSYNC
     72  f089					      repend
     73  f08b		       85 02		      sta	WSYNC
     72  f08b					      repend
     73  f08d		       85 02		      sta	WSYNC
     72  f08d					      repend
     73  f08f		       85 02		      sta	WSYNC
     72  f08f					      repend
     73  f091		       85 02		      sta	WSYNC
     72  f091					      repend
     73  f093		       85 02		      sta	WSYNC
     72  f093					      repend
     73  f095		       85 02		      sta	WSYNC
     74  f097					      repend
     75  f097		       a5 80		      lda	p0x
     76  f099		       a0 00		      ldy	#0
     77  f09b		       20 fa f1 	      jsr	setx	;set player0 horizontal position
     78  f09e		       a5 87		      lda	p1x
     79  f0a0		       a0 01		      ldy	#1
     80  f0a2		       20 fa f1 	      jsr	setx	;set player1 horizontal position
     81  f0a5		       20 37 f2 	      jsr	calcdigoff	; calculate scoreboard digits lookup table offset
     82  f0a8		       85 02		      sta	WSYNC
     83  f0aa		       85 2a		      sta	HMOVE	;apply horizontal movements set by subroutine
     84  f0ac		       a9 00		      lda	#0
     85  f0ae		       85 01		      sta	VBLANK
     86  f0b0							;scoreboard setup
     87  f0b0							;clear TIA register before each frame
     88  f0b0		       a9 00		      lda	#0
     89  f0b2		       85 0d		      sta	PF0
     90  f0b4		       85 0e		      sta	PF1
     91  f0b6		       85 0f		      sta	PF2
     92  f0b8		       85 1b		      sta	GRP0
     93  f0ba		       85 1c		      sta	GRP1
     94  f0bc		       85 0a		      sta	CTRLPF
     95  f0be		       85 09		      sta	COLUBK
     96  f0c0		       a9 1e		      lda	#$1E
     97  f0c2		       85 08		      sta	COLUPF
     98  f0c4		       a2 05		      ldx	#dgh	;start X counter with 5 (height of digits)
     99  f0c6				   scrdgtl
    100  f0c6		       a4 93		      ldy	tenoffset	;get the tens digit offset for the score
    101  f0c8		       b9 58 f2 	      lda	digit,Y	;load the bit pattern from lookup table
    102  f0cb		       29 f0		      and	#$F0	;mask/remove the graphics for the ones digit
    103  f0cd		       85 95		      sta	scrsp	;save the score tens digit pattern in a variable
    104  f0cf		       a4 91		      ldy	oneoffset	;get the ones digit offset for the score
    105  f0d1		       b9 58 f2 	      lda	digit,Y	;load the digit bit pattern from lookup table
    106  f0d4		       29 0f		      and	#$0F	;mask/remove the graphics for the tens digit
    107  f0d6		       05 95		      ora	scrsp	;merge it with the saved tens digit sprite
    108  f0d8		       85 95		      sta	scrsp	;and save it
    109  f0da		       85 02		      sta	WSYNC	;wait for the end of scanline
    110  f0dc		       85 0e		      sta	PF1	;update the playfield to display the score sprite
    111  f0de		       a4 94		      ldy	tenoffset+1	;get the left digit offset for the timer
    112  f0e0		       b9 58 f2 	      lda	digit,Y	;load the digit pattern from lookup table
    113  f0e3		       29 f0		      and	#$F0	;mask/remove the graphics for the ones digit
    114  f0e5		       85 96		      sta	tmrsp	;save the timer tens digit pattern in a variable
    115  f0e7		       a4 92		      ldy	oneoffset+1	;get the ones digit offset for the timer
    116  f0e9		       b9 58 f2 	      lda	digit,Y	;load digit pattern from the lookup table
    117  f0ec		       29 0f		      and	#$0F	;mask/remove the graphics for the tens digit
    118  f0ee		       05 96		      ora	tmrsp	;merge with the saved tens digit graphics
    119  f0f0		       85 96		      sta	tmrsp	;and save it
    120  f0f2		       20 57 f2 	      jsr	slp12	;wastes some cycles
    121  f0f5		       85 0e		      sta	PF1	;update the playfield for timer display
    122  f0f7		       a4 95		      ldy	scrsp	;preload for the next scanline
    123  f0f9		       85 02		      sta	WSYNC	;wait for next scanline
    124  f0fb		       84 0e		      sty	PF1	;update playfield for the score display
    125  f0fd		       e6 93		      inc	tenoffset
    126  f0ff		       e6 94		      inc	tenoffset+1
    127  f101		       e6 91		      inc	oneoffset
    128  f103		       e6 92		      inc	oneoffset+1	;increment all digits for the next line of data
    129  f105		       20 57 f2 	      jsr	slp12	;waste some cycles
    130  f108		       ca		      dex		;X--
    131  f109		       85 0e		      sta	PF1	;update the playfield for the timer display
    132  f10b		       d0 b9		      bne	scrdgtl	;if dex != 0, then branch to ScoreDigitLoop
    133  f10d		       85 02		      sta	WSYNC
    134  f10f		       a9 00		      lda	#0
    135  f111		       85 0d		      sta	PF0
    136  f113		       85 0e		      sta	PF1
    137  f115		       85 0f		      sta	PF2
    138  f117					      repeat	3
    139  f117		       85 02		      sta	WSYNC
    138  f117					      repend
    139  f119		       85 02		      sta	WSYNC
    138  f119					      repend
    139  f11b		       85 02		      sta	WSYNC
    140  f11d					      repend
    141  f11d				   vl			;visible lines
    142  f11d							;colour palette -> https://en.wikipedia.org/wiki/List_of_video_game_console_palettes
    143  f11d		       a5 97		      lda	tclr
    144  f11f		       85 08		      sta	COLUPF	; set the terrain background color
    145  f121		       a5 98		      lda	rclr
    146  f123		       85 09		      sta	COLUBK
    147  f125		       a9 01		      lda	#%00000001	;enable reflection of playfield
    148  f127		       85 0a		      sta	CTRLPF	;control playfield register (left most bit decides on reflection or repetition)
    149  f129		       a9 f0		      lda	#$F0
    150  f12b		       85 0d		      sta	PF0
    151  f12d		       a9 fc		      lda	#$FC
    152  f12f		       85 0e		      sta	PF1
    153  f131		       a9 00		      lda	#0
    154  f133		       85 0f		      sta	PF2
    155  f135		       a2 54		      ldx	#84	;half of visible lines because of 2-line kernel usag
    156  f137				   .vll 		;visible line loop
    157  f137				   .check_p0		;check if p0 is ready to render
    158  f137		       8a		      txa		;transfer x to a register
    159  f138		       38		      sec		;set the carry flag for subtraction
    160  f139		       e5 81		      sbc	p0y	;subtract p0 y from current line
    161  f13b		       c5 09		      cmp	p0h	;check if sprite is in render position
    162  f13d		       90 02		      bcc	.dp0	;if rs < p0h, draw p0
    163  f13f		       a9 00		      lda	#0	;else set a register to 0 in order to prepare for next iter
    164  f141				   .dp0 		;draw player0 sprite
    165  f141		       18		      clc		;clear carry flag before addition
    166  f142		       65 86		      adc	p0ao
    167  f144		       a8		      tay		;transfer a to y
    168  f145		       b1 82		      lda	(p0s),Y
    169  f147		       85 02		      sta	WSYNC
    170  f149		       85 1b		      sta	GRP0
    171  f14b		       b1 84		      lda	(p0c),Y
    172  f14d		       85 06		      sta	COLUP0
    173  f14f				   .check_p1		;check if p1 is ready to render
    174  f14f		       8a		      txa		;transfer x to a register
    175  f150		       38		      sec		;set the carry flag for subtraction
    176  f151		       e5 88		      sbc	p1y	;subtract p0 y from current line
    177  f153		       c5 09		      cmp	p1h	;check if sprite is in render position
    178  f155		       90 02		      bcc	.dp1	;if rs < p0h, draw p0
    179  f157		       a9 00		      lda	#0	;else set a register to 0 in order to prepare for next iter
    180  f159				   .dp1 		;draw player1 sprite
    181  f159		       a8		      tay		;transfer a to y
    182  f15a		       a9 05		      lda	#%00000101
    183  f15c		       85 05		      sta	NUSIZ1
    184  f15e		       b1 89		      lda	(p1s),Y
    185  f160		       85 02		      sta	WSYNC
    186  f162		       85 1c		      sta	GRP1
    187  f164		       b1 8b		      lda	(p1c),Y
    188  f166		       85 07		      sta	COLUP1
    189  f168		       ca		      dex
    190  f169		       d0 cc		      bne	.vll
    191  f16b		       a9 00		      lda	#0
    192  f16d		       85 86		      sta	p0ao
    193  f16f							;overcan
    194  f16f		       a9 02		      lda	#2
    195  f171		       85 01		      sta	VBLANK
    196  f173		       a2 1e		      ldx	#30	;30 ovescan scanlines
    197  f175				   ovs
    198  f175		       85 02		      sta	WSYNC
    199  f177		       ca		      dex		;x--
    200  f178		       d0 fb		      bne	ovs	;jump to ovs if x!=0
    201  f17a		       a9 00		      lda	#0
    202  f17c		       85 01		      sta	VBLANK	;disable blank scanlines
    203  f17e							;process input for p0 (up-down-left-right)
    204  f17e				   p0up 		;check if p0 is pressed up arrow
    205  f17e		       a9 10		      lda	#%00010000	;p0 up
    206  f180		       2c 80 02 	      bit	SWCHA
    207  f183		       d0 0c		      bne	p0dw
    208  f185		       a5 81		      lda	p0y
    209  f187		       c9 46		      cmp	#70
    210  f189		       10 06		      bpl	p0dw
    211  f18b		       e6 81		      inc	p0y	;p0 y pos++
    212  f18d		       a9 00		      lda	#0
    213  f18f		       85 86		      sta	p0ao
    214  f191				   p0dw 		;p0 down
    215  f191		       a9 20		      lda	#%00100000
    216  f193		       2c 80 02 	      bit	SWCHA
    217  f196		       d0 0c		      bne	p0le
    218  f198		       a5 81		      lda	p0y
    219  f19a		       c9 05		      cmp	#5
    220  f19c		       30 06		      bmi	p0le
    221  f19e		       c6 81		      dec	p0y	;p0 y pos--
    222  f1a0		       a9 00		      lda	#0
    223  f1a2		       85 86		      sta	p0ao
    224  f1a4				   p0le 		;p0 left
    225  f1a4		       a9 40		      lda	#%01000000
    226  f1a6		       2c 80 02 	      bit	SWCHA
    227  f1a9		       d0 0c		      bne	p0ri
    228  f1ab		       a5 80		      lda	p0x
    229  f1ad		       c9 1e		      cmp	#30
    230  f1af		       30 06		      bmi	p0ri
    231  f1b1		       c6 80		      dec	p0x	;p0 x pos--
    232  f1b3		       a9 09		      lda	#9
    233  f1b5		       85 86		      sta	p0ao
    234  f1b7				   p0ri 		;p0 right
    235  f1b7		       a9 80		      lda	#%10000000
    236  f1b9		       2c 80 02 	      bit	SWCHA
    237  f1bc		       d0 0c		      bne	df
    238  f1be		       a5 80		      lda	p0x
    239  f1c0		       c9 55		      cmp	#85
    240  f1c2		       10 06		      bpl	df
    241  f1c4		       e6 80		      inc	p0x	;p0 x pos++
    242  f1c6		       a9 09		      lda	#9
    243  f1c8		       85 86		      sta	p0ao
    244  f1ca				   df			;if none action taken by p0
    245  f1ca				   up1pos		;update p1 y position
    246  f1ca		       a5 88		      lda	p1y	;transfer p1 y pos to a register
    247  f1cc		       18		      clc		;clear carry register for comparison
    248  f1cd		       c9 00		      cmp	#0	;check if p1 reached to 0
    249  f1cf		       30 05		      bmi	.resp1pos	;reset p1 y position to top if it reached 0
    250  f1d1		       c6 88		      dec	p1y	;else p1y--
    251  f1d3		       4c dd f1 	      jmp	endpos	;jump over reset
    252  f1d6				   .resp1pos		;reset p1 position
    253  f1d6		       20 19 f2 	      jsr	rngp1
    254  f1d9		       e6 8e		      inc	score	;score ++
    255  f1db		       e6 8f		      inc	timer	;timer++
    256  f1dd				   endpos
    257  f1dd				   .cp0p1		;collision checks
    258  f1dd		       a9 80		      lda	#%10000000	;CXPPMM bit 7 detects p0 and p1 collision
    259  f1df		       24 07		      bit	CXPPMM	;check CXPPMM bit 7
    260  f1e1		       d0 06		      bne	.CP0P1	;jump if collided
    261  f1e3		       20 f1 f1 	      jsr	strclr
    262  f1e6		       4c ec f1 	      jmp	.endclch
    263  f1e9				   .CP0P1		;when p0 collides with p1
    264  f1e9		       20 0e f2 	      jsr	GO	;game over
    265  f1ec				   .endclch		;end collision check
    266  f1ec		       85 2c		      sta	CXCLR	;clear collisions
    267  f1ee		       4c 45 f0 	      jmp	dk
    268  f1f1				   strclr     subroutine		;set terrain river colour
    269  f1f1		       a9 c2		      lda	#$C2
    270  f1f3		       85 97		      sta	tclr	;set terrain color to green
    271  f1f5		       a9 84		      lda	#$84
    272  f1f7		       85 98		      sta	rclr	;set river color to blue
    273  f1f9		       60		      rts
    274  f1fa				   setx       subroutine		;set object's x positon subroutine
    275  f1fa		       85 02		      sta	WSYNC
    276  f1fc		       38		      sec		;set carry flag
    277  f1fd				   .div 		;division loop -since 6502 opcode doesnt include any division, division is achieved via series of subtractions
    278  f1fd		       e9 0f		      sbc	#15	;subtraction takes 2 clock cycles and branching takes 3 clock cycle thus making a total of 5 clock cycle in each
    279  f1ff							;subtraction. each CPU clock cycle is equivelent of 3 TIA clock cycles so each division is 15 pixel. to determine
    280  f1ff							;p0_x location calculate rough position by dividing by 15 and use remainder to fine tune the exact position
    281  f1ff		       b0 fc		      bcs	.div	;jump to div if a<0
    282  f201		       49 07		      eor	#7	;exclusive or with %00000111 to fine tune the x position
    283  f203					      repeat	4	;HMP0 uses 4 bits %xxxx0000
    284  f203		       0a		      asl
    283  f203					      repend
    284  f204		       0a		      asl
    283  f204					      repend
    284  f205		       0a		      asl
    283  f205					      repend
    284  f206		       0a		      asl
    285  f207					      repend
    286  f207		       99 20 00 	      sta	HMP0,Y
    287  f20a		       99 10 00 	      sta	RESP0,Y
    288  f20d		       60		      rts
    289  f20e				   GO	      subroutine		;game over subroutine
    290  f20e		       a9 30		      lda	#$30
    291  f210		       85 97		      sta	tclr	;set terrain color to red
    292  f212		       85 98		      sta	rclr	;set river color to red
    293  f214		       a9 00		      lda	#0
    294  f216		       85 8e		      sta	score	;Score = 0
    295  f218		       60		      rts
    296  f219				   rngp1      subroutine		;random number generator for p1 starting position
    297  f219		       a5 8d		      lda	rng
    298  f21b		       0a		      asl
    299  f21c		       45 8d		      eor	rng
    300  f21e		       0a		      asl
    301  f21f		       45 8d		      eor	rng
    302  f221		       0a		      asl
    303  f222		       0a		      asl
    304  f223		       45 8d		      eor	rng
    305  f225		       0a		      asl
    306  f226		       26 8d		      rol	rng	;performs a series of shifts and bit operations
    307  f228		       4a		      lsr
    308  f229		       4a		      lsr		;divide the value by 4 with 2 right shifts
    309  f22a		       85 87		      sta	p1x	;save random number on player1 x position
    310  f22c		       a9 1e		      lda	#30
    311  f22e		       65 87		      adc	p1x	;30+p1x to compensate for left playfield
    312  f230		       85 87		      sta	p1x	;set new value to the p1x
    313  f232		       a9 60		      lda	#96
    314  f234		       85 88		      sta	p1y	;set the y-position to the top of the screen
    315  f236		       60		      rts
    316  f237				   calcdigoff subroutine
    317  f237		       a2 01		      ldx	#1	;X register is the loop counter
    318  f239				   prepscrl		;this will loop twice, first X=1, and then X=0
    319  f239		       b5 8e		      lda	score,X	;load A with timer (X=1) or Score (X=0)
    320  f23b		       29 0f		      and	#$0F	;remove the tens digit by masking 4 bits 00001111
    321  f23d		       85 90		      sta	temp	;save the value of A into Temp
    322  f23f		       0a		      asl		;shift left (it is now N*2)
    323  f240		       0a		      asl		;shift left (it is now N*4)
    324  f241		       65 90		      adc	temp	;add the value saved in Temp (+N)
    325  f243		       95 91		      sta	oneoffset,X	;save A in OnesDigitOffset+1 or OnesDigitOffset
    326  f245		       b5 8e		      lda	score,X	;load A with timer (X=1) or Score (X=0)
    327  f247		       29 f0		      and	#$F0	;remove the ones digit by masking 4 bits 11110000
    328  f249		       4a		      lsr		;shift right (it is now N/2)
    329  f24a		       4a		      lsr		;shift right (it is now N/4)
    330  f24b		       85 90		      sta	temp	;save the value of A into Temp
    331  f24d		       4a		      lsr		;shift right (it is now N/8)
    332  f24e		       4a		      lsr		;shift right (it is now N/16)
    333  f24f		       65 90		      adc	temp	;add the value saved in Temp (N/16+N/4)
    334  f251		       95 93		      sta	tenoffset,X	;store A in TensDigitOffset+1 or TensDigitOffset
    335  f253		       ca		      dex		;X--
    336  f254		       10 e3		      bpl	prepscrl	; while X >= 0, loop to pass a second time
    337  f256		       60		      rts
    338  f257				   slp12      subroutine
    339  f257		       60		      rts
    340  f258				   digit
    341  f258		       77		      .byte.b	%01110111	; ### ###
    342  f259		       55		      .byte.b	%01010101	; # # # #
    343  f25a		       55		      .byte.b	%01010101	; # # # #
    344  f25b		       55		      .byte.b	%01010101	; # # # #
    345  f25c		       77		      .byte.b	%01110111	; ### ###
    346  f25d		       11		      .byte.b	%00010001	;   #	 #
    347  f25e		       11		      .byte.b	%00010001	;   #	 #
    348  f25f		       11		      .byte.b	%00010001	;   #	 #
    349  f260		       11		      .byte.b	%00010001	;   #	 #
    350  f261		       11		      .byte.b	%00010001	;   #	 #
    351  f262		       77		      .byte.b	%01110111	; ### ###
    352  f263		       11		      .byte.b	%00010001	;   #	 #
    353  f264		       77		      .byte.b	%01110111	; ### ###
    354  f265		       44		      .byte.b	%01000100	; #   #
    355  f266		       77		      .byte.b	%01110111	; ### ###
    356  f267		       77		      .byte.b	%01110111	; ### ###
    357  f268		       11		      .byte.b	%00010001	;   #	 #
    358  f269		       33		      .byte.b	%00110011	;  ##	##
    359  f26a		       11		      .byte.b	%00010001	;   #	 #
    360  f26b		       77		      .byte.b	%01110111	; ### ###
    361  f26c		       55		      .byte.b	%01010101	; # # # #
    362  f26d		       55		      .byte.b	%01010101	; # # # #
    363  f26e		       77		      .byte.b	%01110111	; ### ###
    364  f26f		       11		      .byte.b	%00010001	;   #	 #
    365  f270		       11		      .byte.b	%00010001	;   #	 #
    366  f271		       77		      .byte.b	%01110111	; ### ###
    367  f272		       44		      .byte.b	%01000100	; #   #
    368  f273		       77		      .byte.b	%01110111	; ### ###
    369  f274		       11		      .byte.b	%00010001	;   #	 #
    370  f275		       77		      .byte.b	%01110111	; ### ###
    371  f276		       77		      .byte.b	%01110111	; ### ###
    372  f277		       44		      .byte.b	%01000100	; #   #
    373  f278		       77		      .byte.b	%01110111	; ### ###
    374  f279		       55		      .byte.b	%01010101	; # # # #
    375  f27a		       77		      .byte.b	%01110111	; ### ###
    376  f27b		       77		      .byte.b	%01110111	; ### ###
    377  f27c		       11		      .byte.b	%00010001	;   #	 #
    378  f27d		       11		      .byte.b	%00010001	;   #	 #
    379  f27e		       11		      .byte.b	%00010001	;   #	 #
    380  f27f		       11		      .byte.b	%00010001	;   #	 #
    381  f280		       77		      .byte.b	%01110111	; ### ###
    382  f281		       55		      .byte.b	%01010101	; # # # #
    383  f282		       77		      .byte.b	%01110111	; ### ###
    384  f283		       55		      .byte.b	%01010101	; # # # #
    385  f284		       77		      .byte.b	%01110111	; ### ###
    386  f285		       77		      .byte.b	%01110111	; ### ###
    387  f286		       55		      .byte.b	%01010101	; # # # #
    388  f287		       77		      .byte.b	%01110111	; ### ###
    389  f288		       11		      .byte.b	%00010001	;   #	 #
    390  f289		       77		      .byte.b	%01110111	; ### ###
    391  f28a		       22		      .byte.b	%00100010	;  #	#
    392  f28b		       55		      .byte.b	%01010101	; # # # #
    393  f28c		       77		      .byte.b	%01110111	; ### ###
    394  f28d		       55		      .byte.b	%01010101	; # # # #
    395  f28e		       55		      .byte.b	%01010101	; # # # #
    396  f28f		       77		      .byte.b	%01110111	; ### ###
    397  f290		       55		      .byte.b	%01010101	; # # # #
    398  f291		       66		      .byte.b	%01100110	; ##  ##
    399  f292		       55		      .byte.b	%01010101	; # # # #
    400  f293		       77		      .byte.b	%01110111	; ### ###
    401  f294		       77		      .byte.b	%01110111	; ### ###
    402  f295		       44		      .byte.b	%01000100	; #   #
    403  f296		       44		      .byte.b	%01000100	; #   #
    404  f297		       44		      .byte.b	%01000100	; #   #
    405  f298		       77		      .byte.b	%01110111	; ### ###
    406  f299		       66		      .byte.b	%01100110	; ##  ##
    407  f29a		       55		      .byte.b	%01010101	; # # # #
    408  f29b		       55		      .byte.b	%01010101	; # # # #
    409  f29c		       55		      .byte.b	%01010101	; # # # #
    410  f29d		       66		      .byte.b	%01100110	; ##  ##
    411  f29e		       77		      .byte.b	%01110111	; ### ###
    412  f29f		       44		      .byte.b	%01000100	; #   #
    413  f2a0		       77		      .byte.b	%01110111	; ### ###
    414  f2a1		       44		      .byte.b	%01000100	; #   #
    415  f2a2		       77		      .byte.b	%01110111	; ### ###
    416  f2a3		       77		      .byte.b	%01110111	; ### ###
    417  f2a4		       44		      .byte.b	%01000100	; #   #
    418  f2a5		       66		      .byte.b	%01100110	; ##  ##
    419  f2a6		       44		      .byte.b	%01000100	; #   #
    420  f2a7		       44		      .byte.b	%01000100	; #   #
    421  f2a8				   p0_spr		;p0 sprite
    422  f2a8		       00		      .byte.b	#%00000000	;
    423  f2a9		       14		      .byte.b	#%00010100	;   # #
    424  f2aa		       7f		      .byte.b	#%01111111	; #######
    425  f2ab		       3e		      .byte.b	#%00111110	;  #####
    426  f2ac		       1c		      .byte.b	#%00011100	;   ###
    427  f2ad		       1c		      .byte.b	#%00011100	;   ###
    428  f2ae		       08		      .byte.b	#%00001000	;    #
    429  f2af		       08		      .byte.b	#%00001000	;    #
    430  f2b0		       08		      .byte.b	#%00001000	;    #
    431  f2b1				   p0_trn		;p0 turn sprite
    432  f2b1		       00		      .byte.b	#%00000000	;
    433  f2b2		       08		      .byte.b	#%00001000	;    #
    434  f2b3		       3e		      .byte.b	#%00111110	;  #####
    435  f2b4		       1c		      .byte.b	#%00011100	;   ###
    436  f2b5		       1c		      .byte.b	#%00011100	;   ###
    437  f2b6		       1c		      .byte.b	#%00011100	;   ###
    438  f2b7		       08		      .byte.b	#%00001000	;    #
    439  f2b8		       08		      .byte.b	#%00001000	;    #
    440  f2b9		       08		      .byte.b	#%00001000	;    #
    441  f2ba				   p1_spr		;p1 sprite
    442  f2ba		       00		      .byte.b	#%00000000	;
    443  f2bb		       08		      .byte.b	#%00001000	;    #
    444  f2bc		       08		      .byte.b	#%00001000	;    #
    445  f2bd		       2a		      .byte.b	#%00101010	;  # # #
    446  f2be		       3e		      .byte.b	#%00111110	;  #####
    447  f2bf		       7f		      .byte.b	#%01111111	; #######
    448  f2c0		       2a		      .byte.b	#%00101010	;  # # #
    449  f2c1		       08		      .byte.b	#%00001000	;    #
    450  f2c2		       1c		      .byte.b	#%00011100	;   ###
    451  f2c3				   p0_clr		;p0 colour
    452  f2c3		       00		      .byte.b	#$00
    453  f2c4		       fe		      .byte.b	#$FE
    454  f2c5		       0c		      .byte.b	#$0C
    455  f2c6		       0e		      .byte.b	#$0E
    456  f2c7		       0e		      .byte.b	#$0E
    457  f2c8		       04		      .byte.b	#$04
    458  f2c9		       ba		      .byte.b	#$BA
    459  f2ca		       0e		      .byte.b	#$0E
    460  f2cb		       08		      .byte.b	#$08
    461  f2cc				   p0_tclr		;p0 turn colour
    462  f2cc		       00		      .byte.b	#$00
    463  f2cd		       fe		      .byte.b	#$FE
    464  f2ce		       0c		      .byte.b	#$0C
    465  f2cf		       0e		      .byte.b	#$0E
    466  f2d0		       0e		      .byte.b	#$0E
    467  f2d1		       04		      .byte.b	#$04
    468  f2d2		       0e		      .byte.b	#$0E
    469  f2d3		       0e		      .byte.b	#$0E
    470  f2d4		       08		      .byte.b	#$08
    471  f2d5				   p1_clr		;p1 colour
    472  f2d5		       00		      .byte.b	#$00
    473  f2d6		       32		      .byte.b	#$32
    474  f2d7		       32		      .byte.b	#$32
    475  f2d8		       0e		      .byte.b	#$0E
    476  f2d9		       40		      .byte.b	#$40
    477  f2da		       40		      .byte.b	#$40
    478  f2db		       40		      .byte.b	#$40
    479  f2dc		       40		      .byte.b	#$40
    480  f2dd		       40		      .byte.b	#$40
    481  fffc					      org	$FFFC
    482  fffc		       00 f0		      .word.w	res
    483  fffe		       00 f0		      .word.w	res
